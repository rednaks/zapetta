{"version":3,"sources":["components/channel-button/ChannelButton.js","components/channels-board/ChannelsBoard.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["ChannelButton","props","console","log","state","active","config","handleClick","bind","evt","this","id","style","display","flexDirection","justifyContent","isLive","isColor","isSize","className","src","imageUrl","onClick","switchText","Component","ChannelsBoard","url","channelsCfg","channelsConfig","channelId","triggerSwitch","channels","Object","keys","map","k","flexGrow","isCentered","getIdFromYoutubeUrl","URL","searchParams","get","App","initialVideoId","initialUrl","useState","setVideoId","setUrl","setIsLive","width","height","playing","controls","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.92ec6bc6.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Image, Button, Tag } from 'bloomer';\n\nimport \"./ChannelButton.css\";\n\nclass ChannelButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log(\"Props button \", props)\n\n    this.state = {\n        active: false,\n        config: this.props.config\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick (evt) {\n      this.props.handleClick(this.state.config.id);\n  }\n\n\n  render() {\n    return (\n        <Box>\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}}>\n              { this.state.config.isLive ? (<Tag isColor=\"success\">Live</Tag>) : (<Tag>Off</Tag>) }\n              <Image isSize=\"96x96\" \n               className=\"rounded\"\n               src={this.state.config.imageUrl}/>\n              <Button onClick={this.handleClick}>{this.state.config.switchText}</Button>\n            </div>\n        </Box>\n    )\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredConfig: PropTypes.object,\n    requiredHandleClick: PropTypes.func\n};*/\n\nexport default ChannelButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Column, Columns } from 'bloomer';\nimport ChannelButton from '../channel-button/ChannelButton';\n\n\nclass ChannelsBoard extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        url: null,\n    }\n\n    this.channelsCfg = this.props.channelsConfig;\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick (channelId) {\n      this.props.triggerSwitch(channelId);      \n  }\n\n\n  render() {\n    const config = this.channelsCfg;\n    \n    let channels = Object.keys(config).map( (k) => {\n        return (\n            <Column style={{flexGrow: 0}}>\n                <ChannelButton config={config[k]} handleClick={this.handleClick}/>\n            </Column>\n        )\n    });\n\n    return (\n        <div>\n            <Columns isCentered>\n                {channels}\n            </Columns>\n\n        </div>\n    );\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredChannelsConfig: PropTypes.object,\n};*/\n\nexport default ChannelsBoard;\n\n\n","import React, { useState } from 'react';\nimport ChannelsBoard from '../../components/channels-board/ChannelsBoard';\nimport { Column, Columns, Notification } from 'bloomer';\nimport ReactPlayer from 'react-player';\n\nimport 'bulma/css/bulma.css';\n\n\nconst getIdFromYoutubeUrl = (url) => {\n  // https://www.youtube.com/watch?v=GKSRyLdjsPA \n  if (url) {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get(\"v\");\n  }\n  return \"\";\n}\n\n\nexport default function App(props) {\n\n\n\n  const channelsConfig = {\n    \"watania1\": {\n      \"id\": \"watania1\",\n      \"name\": \"Wataniya 1\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJwRORj5fMAI_AjY92uZ-5yPuRm6yqbZVsdBIQ=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=o4UPwr2IkjU\",\n      \"isLive\": true,\n      \"switchText\": \"zappi\"\n    },\n    \"watania2\": {\n      \"id\": \"watania2\",\n      \"name\": \"Wataniya 2\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJys87C140F7raYZKeRrUNPcck21D4B8C30dvA=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=yD9Af5QAwJU\",\n      \"isLive\": true,\n      \"switchText\": \"zappi\"\n    },\n    \"Hiwar\": {\n      \"id\": \"Hiwar\",\n      \"name\": \"Hiwar\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJz9yF3FMUCAM-535jJmBRFgNhk6_Ncfp5Q2Jg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=YBKTAwZRHHw\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    },\n    \"carthageplus\": {\n      \"id\": \"carthageplus\",\n      \"name\": \"Carthage+\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJyt0Up2McFYy9LsFfAxM-BSUmF52ZaN2f2ceQ=s48-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    },\n    \"attessia\": {\n      \"id\": \"attessia\",\n      \"name\": \"Attesia\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJxRM8HEhrEPPHCPX4ReJ6B5UL8lzmQCBYw-rg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    }\n  }\n\n  let initialVideoId = \"\";\n  let initialLiveState = false;\n  let initialUrl = \"\";\n\n  for (const k of Object.keys(channelsConfig)) {\n    if (channelsConfig[k].isLive) {\n      initialUrl = channelsConfig[k].url;\n      initialVideoId = getIdFromYoutubeUrl(initialUrl);\n      initialLiveState = true;\n      break;\n    }\n  }\n\n  const [videoId, setVideoId] = useState(initialVideoId);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLive, setIsLive] = useState(true);\n\n\n  const handleSwitchChannel = (id) => {\n    setUrl(channelsConfig[id].url);\n    setVideoId(getIdFromYoutubeUrl(url));\n    setIsLive(channelsConfig[id].isLive);\n  }\n\n\n  return (\n\n    <div>\n      <ChannelsBoard channelsConfig={channelsConfig} triggerSwitch={handleSwitchChannel}>\n      </ChannelsBoard>\n      <Columns isCentered>\n        {!isLive ?\n          (\n            <Column isSize=\"1/4\">\n              <Notification>\n                Channel is not live yet ! Please select an other channel\n              </Notification>\n            </Column>\n          ) : (\n            <Column isSize=\"1/12\" style={{ flexGrow: 0 }}>\n              <ReactPlayer width=\"1280px\" height=\"720px\" url={url} playing controls/>\n            </Column>\n          )\n        }\n\n      </Columns>\n    </div>\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n//import './i18n/';\n\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}