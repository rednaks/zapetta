{"version":3,"sources":["components/channel-button/ChannelButton.js","components/channels-board/ChannelsBoard.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["ChannelButton","props","console","log","state","active","config","handleClick","bind","evt","this","id","style","display","flexDirection","justifyContent","isLive","isColor","isSize","className","src","imageUrl","onMouseEnter","handleButtonMouseEnter","onMouseLeave","handleButtonMouseLeave","onClick","switchText","Component","ChannelsBoard","url","channelsCfg","channelsConfig","handleShowPreview","handleHidePreview","channelId","triggerSwitch","element","document","getElementById","position","top","offsetTop","left","offsetLeft","triggerPreview","channels","Object","keys","map","flexGrow","key","isCentered","getIdFromYoutubeUrl","URL","searchParams","get","PREVIEW_CONTAINER_STYLE","width","height","zIndex","App","initialVideoId","initialUrl","k","useState","setVideoId","setUrl","setIsLive","showPreview","setShowPreview","previewPosition","setPreviewPosition","previewUrl","setPreviewUrl","playing","show","controls","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3eecfbbf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Image, Button, Tag } from 'bloomer';\n\nimport \"./ChannelButton.css\";\n\nclass ChannelButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log(\"Props button \", props)\n\n    this.state = {\n        active: false,\n        config: this.props.config\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick (evt) {\n      this.props.handleClick(this.state.config.id);\n  }\n\n\n  render() {\n    return (\n        <Box>\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}}>\n              { this.state.config.isLive ? (<Tag isColor=\"success\">Live</Tag>) : (<Tag>Off</Tag>) }\n              <Image isSize=\"96x96\" \n               className=\"rounded\"\n               src={this.state.config.imageUrl}/>\n              <Button \n                id={`preview-btn-${this.state.config.id}`}\n                onMouseEnter={this.props.handleButtonMouseEnter} \n                onMouseLeave={this.props.handleButtonMouseLeave} \n                onClick={this.handleClick}>\n                  {this.state.config.switchText}\n              </Button>\n            </div>\n        </Box>\n    )\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredConfig: PropTypes.object,\n    requiredHandleClick: PropTypes.func\n};*/\n\nexport default ChannelButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Column, Columns, Box } from 'bloomer';\nimport ChannelButton from '../channel-button/ChannelButton';\nimport ReactPlater from \"react-player\";\n\n\nclass ChannelsBoard extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        url: null,\n    }\n\n    this.channelsCfg = this.props.channelsConfig;\n    this.handleClick = this.handleClick.bind(this);\n    this.handleShowPreview = this.handleShowPreview.bind(this);\n    this.handleHidePreview = this.handleHidePreview.bind(this);\n\n  }\n\n  handleClick (channelId) {\n      this.props.triggerSwitch(channelId);      \n  }\n\n  handleShowPreview (channelId) {\n      const element = document.getElementById(`preview-btn-${channelId}`);\n      const position = {\n          top: element.offsetTop,\n          left: element.offsetLeft\n      };\n      console.log(\"Show preview \", channelId);\n      this.props.triggerPreview(channelId, true, position);\n  }\n\n  handleHidePreview (channelId) {\n      console.log(\"Hide preview\", channelId)\n      this.props.triggerPreview(channelId, false, null);\n  }\n\n  render() {\n    const config = this.channelsCfg;\n    \n    let channels = Object.keys(config).map( (channelId) => {\n        return (\n            <Column style={{flexGrow: 0}}>\n                <ChannelButton \n                    handleButtonMouseEnter={(position) => this.handleShowPreview(channelId, position)} \n                    handleButtonMouseLeave={(position) => this.handleHidePreview(channelId, position)} \n                    key={channelId} \n                    config={config[channelId]} \n                    handleClick={this.handleClick}\n                />\n            </Column>\n        )\n    });\n\n    return (\n        <div>\n            <Columns isCentered>\n                {channels}\n            </Columns>\n\n        </div>\n    );\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredChannelsConfig: PropTypes.object,\n};*/\n\nexport default ChannelsBoard;\n\n\n","import React, { useState } from 'react';\nimport ChannelsBoard from '../../components/channels-board/ChannelsBoard';\nimport { Column, Columns, Notification } from 'bloomer';\nimport ReactPlayer from 'react-player';\n\nimport 'bulma/css/bulma.css';\n\n\nconst getIdFromYoutubeUrl = (url) => {\n  // https://www.youtube.com/watch?v=GKSRyLdjsPA \n  if (url) {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get(\"v\");\n  }\n  return \"\";\n}\n\nconst PREVIEW_CONTAINER_STYLE = {\n  width: \"400px\", \n  height: \"242px\", \n  zIndex: 1, \n  position: \"absolute\"\n}\n\nexport default function App(props) {\n\n\n\n  const channelsConfig = {\n    \"watania1\": {\n      \"id\": \"watania1\",\n      \"name\": \"Wataniya 1\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJwRORj5fMAI_AjY92uZ-5yPuRm6yqbZVsdBIQ=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=o4UPwr2IkjU\",\n      \"isLive\": true,\n      \"switchText\": \"zappi\"\n    },\n    \"watania2\": {\n      \"id\": \"watania2\",\n      \"name\": \"Wataniya 2\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJys87C140F7raYZKeRrUNPcck21D4B8C30dvA=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=yD9Af5QAwJU\",\n      \"isLive\": true,\n      \"switchText\": \"zappi\"\n    },\n    \"Hiwar\": {\n      \"id\": \"Hiwar\",\n      \"name\": \"Hiwar\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJz9yF3FMUCAM-535jJmBRFgNhk6_Ncfp5Q2Jg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=YBKTAwZRHHw\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    },\n    \"carthageplus\": {\n      \"id\": \"carthageplus\",\n      \"name\": \"Carthage+\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJyt0Up2McFYy9LsFfAxM-BSUmF52ZaN2f2ceQ=s48-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    },\n    \"attessia\": {\n      \"id\": \"attessia\",\n      \"name\": \"Attesia\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJxRM8HEhrEPPHCPX4ReJ6B5UL8lzmQCBYw-rg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"\",\n      \"isLive\": false,\n      \"switchText\": \"zappi\"\n    }\n  }\n\n  let initialVideoId = \"\";\n  let initialLiveState = false;\n  let initialUrl = \"\";\n\n  for (const k of Object.keys(channelsConfig)) {\n    if (channelsConfig[k].isLive) {\n      initialUrl = channelsConfig[k].url;\n      initialVideoId = getIdFromYoutubeUrl(initialUrl);\n      initialLiveState = true;\n      break;\n    }\n  }\n\n  const [videoId, setVideoId] = useState(initialVideoId);\n  const [url, setUrl] = useState(initialUrl);\n  \n  const [isLive, setIsLive] = useState(true);\n  const [showPreview, setShowPreview] = useState(false);\n  const [previewPosition, setPreviewPosition] = useState({top: \"0px\", left: \"0px\"});\n  const [previewUrl, setPreviewUrl] = useState(\"\");\n\n\n  const handleSwitchChannel = (id) => {\n    setUrl(channelsConfig[id].url);\n    setVideoId(getIdFromYoutubeUrl(url));\n    setIsLive(channelsConfig[id].isLive);\n  }\n\n  const handleShowPreview = (id, show, position) => {\n    setShowPreview(show && channelsConfig[id].isLive);\n    setPreviewUrl(channelsConfig[id].url);\n    if (position !== null) {\n      setPreviewPosition({\n        top: `${position.top + 55}px`,\n        left: `${position.left - 132}px`\n      });\n    }\n\n  }\n\n  return (\n\n    <div>\n      <div style={{ ...PREVIEW_CONTAINER_STYLE, ...previewPosition, display: showPreview ? \"block\" : \"none\"}} className=\"preview-container\"  >\n        <ReactPlayer width=\"360px\" height=\"202px\" url={previewUrl} playing={showPreview} />\n      </div>\n      <ChannelsBoard triggerPreview={handleShowPreview} channelsConfig={channelsConfig} triggerSwitch={handleSwitchChannel}>\n      </ChannelsBoard>\n      <Columns isCentered>\n        {!isLive ?\n          (\n            <Column isSize=\"1/4\">\n              <Notification>\n                Channel is not live yet ! Please select an other channel\n              </Notification>\n            </Column>\n          ) : (\n            <Column isSize=\"1/12\" style={{ flexGrow: 0 }}>\n              <ReactPlayer width=\"1280px\" height=\"720px\" url={url} playing controls/>\n            </Column>\n          )\n        }\n\n      </Columns>\n    </div>\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n//import './i18n/';\n\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}