{"version":3,"sources":["components/channel-button/ChannelButton.js","components/channels-board/ChannelsBoard.js","containers/App/App.js","serviceWorker.js","index.js"],"names":["ChannelButton","props","console","log","state","active","handleClick","bind","evt","this","id","style","display","flexDirection","justifyContent","isLive","isColor","isSize","className","src","imageUrl","onClick","Component","ChannelsBoard","url","channelsCfg","channelsConfig","channelId","triggerSwitch","config","channels","Object","keys","map","k","flexGrow","isCentered","getIdFromYoutubeUrl","URL","searchParams","get","App","initialVideoId","useState","videoId","setVideoId","setIsLive","width","height","frameBorder","allow","allowFullScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7e99de69.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Image, Button, Tag } from 'bloomer';\n\nimport \"./ChannelButton.css\";\n\nclass ChannelButton extends Component {\n\n  constructor(props) {\n    super(props);\n\n    console.log(\"Props button \", props)\n\n    this.state = {\n        active: false\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick (evt) {\n      this.props.handleClick(this.props.id);\n  }\n\n\n  render() {\n    return (\n        <Box>\n            <div style={{display: \"flex\", flexDirection: \"column\", justifyContent: \"space-between\"}}>\n              { this.props.isLive ? (<Tag isColor=\"success\">Live</Tag>) : (<Tag>Off</Tag>) }\n              <Image isSize=\"96x96\" \n               className=\"rounded\"\n               src={this.props.imageUrl}/>\n              <Button onClick={this.handleClick}>Switch</Button>\n            </div>\n        </Box>\n    )\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredId: PropTypes.string,\n    requiredName: PropTypes.string,\n    requiredImageUrl: PropTypes.string,\n    requiredHandleClick: PropTypes.func\n};*/\n\nexport default ChannelButton;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Column, Columns } from 'bloomer';\nimport ChannelButton from '../channel-button/ChannelButton';\n\n\nclass ChannelsBoard extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        url: null,\n    }\n\n    this.channelsCfg = this.props.channelsConfig;\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n\n  handleClick (channelId) {\n      this.props.triggerSwitch(channelId);      \n  }\n\n\n  render() {\n    const config = this.channelsCfg;\n    console.log(\"Config: \", config);\n    let channels = Object.keys(config).map( (k) => {\n        return (\n            <Column style={{flexGrow: 0}}>\n                <ChannelButton id={k} isLive={config[k].isLive} imageUrl={config[k].imageUrl} handleClick={this.handleClick}/>\n            </Column>\n        )\n    });\n\n    return (\n        <div>\n            <Columns isCentered>\n                {channels}\n            </Columns>\n\n        </div>\n    );\n  }\n};\n\n/*ChannelButton.PropTypes = {\n    requiredChannelsConfig: PropTypes.object,\n};*/\n\nexport default ChannelsBoard;\n\n\n","import React, { useState } from 'react';\nimport ChannelsBoard from '../../components/channels-board/ChannelsBoard';\nimport { Column, Columns, Notification } from 'bloomer';\n\nimport 'bulma/css/bulma.css';\n\n\nconst getIdFromYoutubeUrl = (url) => {\n  // https://www.youtube.com/watch?v=GKSRyLdjsPA \n  if (url) {\n    const urlObj = new URL(url);\n    return urlObj.searchParams.get(\"v\");\n  }\n  return null;\n}\n\n\nexport default function App(props) {\n\n\n\n  const channelsConfig = {\n    \"watania1\": {\n      \"name\": \"Wataniya 1\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJwRORj5fMAI_AjY92uZ-5yPuRm6yqbZVsdBIQ=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=o4UPwr2IkjU\",\n      \"isLive\": true,\n    },\n    \"watania2\": {\n      \"name\": \"Wataniya 2\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJys87C140F7raYZKeRrUNPcck21D4B8C30dvA=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=yD9Af5QAwJU\",\n      \"isLive\": true\n    },\n    \"Hiwar\": {\n      \"name\": \"Hiwar\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJz9yF3FMUCAM-535jJmBRFgNhk6_Ncfp5Q2Jg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"https://www.youtube.com/watch?v=YBKTAwZRHHw\",\n      \"isLive\": true\n    },\n    \"attessia\": {\n      \"name\": \"Attesia\",\n      \"imageUrl\": \"https://yt3.ggpht.com/a/AATXAJxRM8HEhrEPPHCPX4ReJ6B5UL8lzmQCBYw-rg=s100-c-k-c0xffffffff-no-rj-mo\",\n      \"url\": \"\",\n      \"isLive\": false\n    }\n  }\n\n  let initialVideoId = \"\";\n  let initialLiveState = false;\n\n  for (const k of Object.keys(channelsConfig)) {\n    if (channelsConfig[k].isLive) {\n      initialVideoId = getIdFromYoutubeUrl(channelsConfig[k].url);\n      initialLiveState = true;\n      break;\n    }\n  }\n\n  const [videoId, setVideoId] = useState(initialVideoId);\n  const [isLive, setIsLive] = useState(true);\n\n\n  const handleSwitchChannel = (id) => {\n    setVideoId(getIdFromYoutubeUrl(channelsConfig[id].url));\n    setIsLive(channelsConfig[id].isLive);\n  }\n\n\n  return (\n\n    <div>\n      <ChannelsBoard channelsConfig={channelsConfig} triggerSwitch={handleSwitchChannel}>\n      </ChannelsBoard>\n      <Columns isCentered>\n        {!isLive ?\n          (\n            <Column isSize=\"1/4\">\n              <Notification>\n                Channel is not live yet ! Please select an other channel\n              </Notification>\n            </Column>\n          ) : (\n            <Column isSize=\"1/12\" style={{ flexGrow: 0 }}>\n\n              <iframe\n                width=\"1080\" height=\"720\"\n                src={`https://www.youtube.com/embed/${videoId}?autoplay=1`}\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              >\n              </iframe>\n            </Column>\n          )\n        }\n\n      </Columns>\n    </div>\n  );\n};\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n//import './i18n/';\n\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}